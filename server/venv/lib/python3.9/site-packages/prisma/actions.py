# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off
from __future__ import annotations

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template actions.py.jinja --
from typing import TypeVar
import warnings

from . import types, errors, bases
from ._compat import model_parse

if TYPE_CHECKING:
    from .client import Prisma
    from .bases import _PrismaModel


_PrismaModelT = TypeVar('_PrismaModelT', bound='_PrismaModel')


class OrganizationActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Organization]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Organization.prisma().query_raw(
            'SELECT * FROM Organization WHERE OrganizationID = ?',
            1103527590,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Organization
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Organization.prisma().query_first(
            'SELECT * FROM Organization WHERE Name = ?',
            'dhheabfhf',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.OrganizationCreateInput,
        include: Optional[types.OrganizationInclude] = None
    ) -> _PrismaModelT:
        """Create a new Organization record.

        Parameters
        ----------
        data
            Organization record data
        include
            Specifies which relations should be loaded on the returned Organization model

        Returns
        -------
        prisma.models.Organization
            The created Organization record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Organization record from just the required fields
        organization = await Organization.prisma().create(
            data={
                # data to create a Organization record
                'Name': 'ggciceaie',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.OrganizationCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Organization records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Organization record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Organization.prisma().create_many(
            data=[
                {
                    # data to create a Organization record
                    'Name': 'bbehjachib',
                },
                {
                    # data to create a Organization record
                    'Name': 'cadfabfehe',
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.OrganizationWhereUniqueInput,
        include: Optional[types.OrganizationInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Organization record.

        Parameters
        ----------
        where
            Organization filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Organization model

        Returns
        -------
        prisma.models.Organization
            The deleted Organization record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        organization = await Organization.prisma().delete(
            where={
                'OrganizationID': 368800899,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.OrganizationWhereUniqueInput,
        include: Optional[types.OrganizationInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Organization record.

        Parameters
        ----------
        where
            Organization filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Organization model

        Returns
        -------
        prisma.models.Organization
            The found Organization record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        organization = await Organization.prisma().find_unique(
            where={
                'OrganizationID': 1508029952,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.OrganizationWhereUniqueInput,
        include: Optional[types.OrganizationInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Organization record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Organization filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Organization model

        Returns
        -------
        prisma.models.Organization
            The found Organization record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        organization = await Organization.prisma().find_unique_or_raise(
            where={
                'OrganizationID': 486256185,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationWhereInput] = None,
        cursor: Optional[types.OrganizationWhereUniqueInput] = None,
        include: Optional[types.OrganizationInclude] = None,
        order: Optional[Union[types.OrganizationOrderByInput, List[types.OrganizationOrderByInput]]] = None,
        distinct: Optional[List[types.OrganizationScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Organization records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Organization records returned
        skip
            Ignore the first N results
        where
            Organization filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Organization model
        order
            Order the returned Organization records by any field
        distinct
            Filter Organization records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Organization]
            The list of all Organization records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Organization records
        organizations = await Organization.prisma().find_many(take=10)

        # find the first 5 Organization records ordered by the Description field
        organizations = await Organization.prisma().find_many(
            take=5,
            order={
                'Description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationWhereInput] = None,
        cursor: Optional[types.OrganizationWhereUniqueInput] = None,
        include: Optional[types.OrganizationInclude] = None,
        order: Optional[Union[types.OrganizationOrderByInput, List[types.OrganizationOrderByInput]]] = None,
        distinct: Optional[List[types.OrganizationScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Organization record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Organization filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Organization model
        order
            Order the returned Organization records by any field
        distinct
            Filter Organization records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Organization
            The first Organization record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Organization record ordered by the Website field
        organization = await Organization.prisma().find_first(
            skip=1,
            order={
                'Website': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationWhereInput] = None,
        cursor: Optional[types.OrganizationWhereUniqueInput] = None,
        include: Optional[types.OrganizationInclude] = None,
        order: Optional[Union[types.OrganizationOrderByInput, List[types.OrganizationOrderByInput]]] = None,
        distinct: Optional[List[types.OrganizationScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Organization record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Organization filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Organization model
        order
            Order the returned Organization records by any field
        distinct
            Filter Organization records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Organization
            The first Organization record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Organization record ordered by the OrganizationID field
        organization = await Organization.prisma().find_first_or_raise(
            skip=1,
            order={
                'OrganizationID': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.OrganizationUpdateInput,
        where: types.OrganizationWhereUniqueInput,
        include: Optional[types.OrganizationInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Organization record.

        Parameters
        ----------
        data
            Organization record data specifying what to update
        where
            Organization filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Organization model

        Returns
        -------
        prisma.models.Organization
            The updated Organization record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        organization = await Organization.prisma().update(
            where={
                'OrganizationID': 1062517886,
            },
            data={
                # data to update the Organization record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.OrganizationWhereUniqueInput,
        data: types.OrganizationUpsertInput,
        include: Optional[types.OrganizationInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Organization filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Organization model

        Returns
        -------
        prisma.models.Organization
            The created or updated Organization record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        organization = await Organization.prisma().upsert(
            where={
                'OrganizationID': 267834847,
            },
            data={
                'create': {
                    'OrganizationID': 267834847,
                    'Name': 'cadfabfehe',
                },
                'update': {
                    'Name': 'cadfabfehe',
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.OrganizationUpdateManyMutationInput,
        where: types.OrganizationWhereInput,
    ) -> int:
        """Update multiple Organization records

        Parameters
        ----------
        data
            Organization data to update the selected Organization records to
        where
            Filter to select the Organization records to update

        Returns
        -------
        int
            The total number of Organization records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Organization records
        total = await Organization.prisma().update_many(
            data={
                'Name': 'biabhbdai'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationWhereInput] = None,
        cursor: Optional[types.OrganizationWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Organization records present in the database

        Parameters
        ----------
        select
            Select the Organization fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Organization filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.OrganizationCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Organization.prisma().count()

        # results: prisma.types.OrganizationCountAggregateOutput
        results = await Organization.prisma().count(
            select={
                '_all': True,
                'Description': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.OrganizationCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationWhereInput] = None,
        cursor: Optional[types.OrganizationWhereUniqueInput] = None,
    ) -> types.OrganizationCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.OrganizationCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.OrganizationWhereInput] = None,
        cursor: Optional[types.OrganizationWhereUniqueInput] = None,
    ) -> Union[int, types.OrganizationCountAggregateOutput]:
        """Count the number of Organization records present in the database

        Parameters
        ----------
        select
            Select the Organization fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Organization filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.OrganizationCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Organization.prisma().count()

        # results: prisma.types.OrganizationCountAggregateOutput
        results = await Organization.prisma().count(
            select={
                '_all': True,
                'Website': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.OrganizationCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.OrganizationWhereInput] = None
    ) -> int:
        """Delete multiple Organization records.

        Parameters
        ----------
        where
            Optional Organization filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Organization records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Organization records
        total = await Organization.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.OrganizationScalarFieldKeys'],
        *,
        where: Optional['types.OrganizationWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.OrganizationAvgAggregateInput'] = None,
        sum: Optional['types.OrganizationSumAggregateInput'] = None,
        min: Optional['types.OrganizationMinAggregateInput'] = None,
        max: Optional['types.OrganizationMaxAggregateInput'] = None,
        having: Optional['types.OrganizationScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.OrganizationCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.OrganizationScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.OrganizationScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.OrganizationGroupByOutput']:
        """Group Organization records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Organization fields to group records by
        where
            Organization filter to select records
        take
            Limit the maximum number of Organization records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.OrganizationGroupByOutput]
            A list of dictionaries representing the Organization record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Organization records by OrganizationID values
        # and count how many records are in each group
        results = await Organization.prisma().group_by(
            ['OrganizationID'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class MentorActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Mentor]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Mentor.prisma().query_raw(
            'SELECT * FROM Mentor WHERE MentorID = ?',
            836760821,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Mentor
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Mentor.prisma().query_first(
            'SELECT * FROM Mentor WHERE Name = ?',
            'fjfddhigg',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.MentorCreateInput,
        include: Optional[types.MentorInclude] = None
    ) -> _PrismaModelT:
        """Create a new Mentor record.

        Parameters
        ----------
        data
            Mentor record data
        include
            Specifies which relations should be loaded on the returned Mentor model

        Returns
        -------
        prisma.models.Mentor
            The created Mentor record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Mentor record from just the required fields
        mentor = await Mentor.prisma().create(
            data={
                # data to create a Mentor record
                'MentorID': 790425851,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.MentorCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Mentor records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Mentor record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Mentor.prisma().create_many(
            data=[
                {
                    # data to create a Mentor record
                    'MentorID': 2111915288,
                },
                {
                    # data to create a Mentor record
                    'MentorID': 1149758321,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.MentorWhereUniqueInput,
        include: Optional[types.MentorInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Mentor record.

        Parameters
        ----------
        where
            Mentor filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Mentor model

        Returns
        -------
        prisma.models.Mentor
            The deleted Mentor record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        mentor = await Mentor.prisma().delete(
            where={
                'MentorID': 1644289366,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.MentorWhereUniqueInput,
        include: Optional[types.MentorInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Mentor record.

        Parameters
        ----------
        where
            Mentor filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Mentor model

        Returns
        -------
        prisma.models.Mentor
            The found Mentor record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        mentor = await Mentor.prisma().find_unique(
            where={
                'MentorID': 1388290519,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.MentorWhereUniqueInput,
        include: Optional[types.MentorInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Mentor record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Mentor filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Mentor model

        Returns
        -------
        prisma.models.Mentor
            The found Mentor record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        mentor = await Mentor.prisma().find_unique_or_raise(
            where={
                'MentorID': 1647418052,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MentorWhereInput] = None,
        cursor: Optional[types.MentorWhereUniqueInput] = None,
        include: Optional[types.MentorInclude] = None,
        order: Optional[Union[types.MentorOrderByInput, List[types.MentorOrderByInput]]] = None,
        distinct: Optional[List[types.MentorScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Mentor records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Mentor records returned
        skip
            Ignore the first N results
        where
            Mentor filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Mentor model
        order
            Order the returned Mentor records by any field
        distinct
            Filter Mentor records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Mentor]
            The list of all Mentor records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Mentor records
        mentors = await Mentor.prisma().find_many(take=10)

        # find the first 5 Mentor records ordered by the eMail field
        mentors = await Mentor.prisma().find_many(
            take=5,
            order={
                'eMail': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MentorWhereInput] = None,
        cursor: Optional[types.MentorWhereUniqueInput] = None,
        include: Optional[types.MentorInclude] = None,
        order: Optional[Union[types.MentorOrderByInput, List[types.MentorOrderByInput]]] = None,
        distinct: Optional[List[types.MentorScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Mentor record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Mentor filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Mentor model
        order
            Order the returned Mentor records by any field
        distinct
            Filter Mentor records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Mentor
            The first Mentor record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Mentor record ordered by the Mobile field
        mentor = await Mentor.prisma().find_first(
            skip=1,
            order={
                'Mobile': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.MentorWhereInput] = None,
        cursor: Optional[types.MentorWhereUniqueInput] = None,
        include: Optional[types.MentorInclude] = None,
        order: Optional[Union[types.MentorOrderByInput, List[types.MentorOrderByInput]]] = None,
        distinct: Optional[List[types.MentorScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Mentor record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Mentor filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Mentor model
        order
            Order the returned Mentor records by any field
        distinct
            Filter Mentor records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Mentor
            The first Mentor record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Mentor record ordered by the Specialization field
        mentor = await Mentor.prisma().find_first_or_raise(
            skip=1,
            order={
                'Specialization': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.MentorUpdateInput,
        where: types.MentorWhereUniqueInput,
        include: Optional[types.MentorInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Mentor record.

        Parameters
        ----------
        data
            Mentor record data specifying what to update
        where
            Mentor filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Mentor model

        Returns
        -------
        prisma.models.Mentor
            The updated Mentor record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        mentor = await Mentor.prisma().update(
            where={
                'MentorID': 1675546029,
            },
            data={
                # data to update the Mentor record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.MentorWhereUniqueInput,
        data: types.MentorUpsertInput,
        include: Optional[types.MentorInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Mentor filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Mentor model

        Returns
        -------
        prisma.models.Mentor
            The created or updated Mentor record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        mentor = await Mentor.prisma().upsert(
            where={
                'MentorID': 1767274722,
            },
            data={
                'create': {
                    'MentorID': 1767274722,
                },
                'update': {
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.MentorUpdateManyMutationInput,
        where: types.MentorWhereInput,
    ) -> int:
        """Update multiple Mentor records

        Parameters
        ----------
        data
            Mentor data to update the selected Mentor records to
        where
            Filter to select the Mentor records to update

        Returns
        -------
        int
            The total number of Mentor records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Mentor records
        total = await Mentor.prisma().update_many(
            data={
                'Availability': 'dcgchcbbf'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MentorWhereInput] = None,
        cursor: Optional[types.MentorWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Mentor records present in the database

        Parameters
        ----------
        select
            Select the Mentor fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Mentor filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MentorCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Mentor.prisma().count()

        # results: prisma.types.MentorCountAggregateOutput
        results = await Mentor.prisma().count(
            select={
                '_all': True,
                'LinkedIn': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.MentorCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MentorWhereInput] = None,
        cursor: Optional[types.MentorWhereUniqueInput] = None,
    ) -> types.MentorCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.MentorCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.MentorWhereInput] = None,
        cursor: Optional[types.MentorWhereUniqueInput] = None,
    ) -> Union[int, types.MentorCountAggregateOutput]:
        """Count the number of Mentor records present in the database

        Parameters
        ----------
        select
            Select the Mentor fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Mentor filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.MentorCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Mentor.prisma().count()

        # results: prisma.types.MentorCountAggregateOutput
        results = await Mentor.prisma().count(
            select={
                '_all': True,
                'OrganizationID': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.MentorCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.MentorWhereInput] = None
    ) -> int:
        """Delete multiple Mentor records.

        Parameters
        ----------
        where
            Optional Mentor filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Mentor records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Mentor records
        total = await Mentor.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.MentorScalarFieldKeys'],
        *,
        where: Optional['types.MentorWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.MentorAvgAggregateInput'] = None,
        sum: Optional['types.MentorSumAggregateInput'] = None,
        min: Optional['types.MentorMinAggregateInput'] = None,
        max: Optional['types.MentorMaxAggregateInput'] = None,
        having: Optional['types.MentorScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.MentorCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.MentorScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.MentorScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.MentorGroupByOutput']:
        """Group Mentor records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Mentor fields to group records by
        where
            Mentor filter to select records
        take
            Limit the maximum number of Mentor records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.MentorGroupByOutput]
            A list of dictionaries representing the Mentor record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Mentor records by MentorID values
        # and count how many records are in each group
        results = await Mentor.prisma().group_by(
            ['MentorID'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class StudentActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Student]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Student.prisma().query_raw(
            'SELECT * FROM Student WHERE ID = ?',
            1343201072,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Student
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Student.prisma().query_first(
            'SELECT * FROM Student WHERE Name = ?',
            'ghfhiafcb',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.StudentCreateInput,
        include: Optional[types.StudentInclude] = None
    ) -> _PrismaModelT:
        """Create a new Student record.

        Parameters
        ----------
        data
            Student record data
        include
            Specifies which relations should be loaded on the returned Student model

        Returns
        -------
        prisma.models.Student
            The created Student record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Student record from just the required fields
        student = await Student.prisma().create(
            data={
                # data to create a Student record
                'ID': 744964398,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.StudentCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Student records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Student record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Student.prisma().create_many(
            data=[
                {
                    # data to create a Student record
                    'ID': 1969681615,
                },
                {
                    # data to create a Student record
                    'ID': 1116175964,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.StudentWhereUniqueInput,
        include: Optional[types.StudentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Student record.

        Parameters
        ----------
        where
            Student filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Student model

        Returns
        -------
        prisma.models.Student
            The deleted Student record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        student = await Student.prisma().delete(
            where={
                'ID': 861472101,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.StudentWhereUniqueInput,
        include: Optional[types.StudentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Student record.

        Parameters
        ----------
        where
            Student filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Student model

        Returns
        -------
        prisma.models.Student
            The found Student record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        student = await Student.prisma().find_unique(
            where={
                'ID': 1303003706,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.StudentWhereUniqueInput,
        include: Optional[types.StudentInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Student record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Student filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Student model

        Returns
        -------
        prisma.models.Student
            The found Student record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        student = await Student.prisma().find_unique_or_raise(
            where={
                'ID': 1686638315,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StudentWhereInput] = None,
        cursor: Optional[types.StudentWhereUniqueInput] = None,
        include: Optional[types.StudentInclude] = None,
        order: Optional[Union[types.StudentOrderByInput, List[types.StudentOrderByInput]]] = None,
        distinct: Optional[List[types.StudentScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Student records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Student records returned
        skip
            Ignore the first N results
        where
            Student filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Student model
        order
            Order the returned Student records by any field
        distinct
            Filter Student records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Student]
            The list of all Student records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Student records
        students = await Student.prisma().find_many(take=10)

        # find the first 5 Student records ordered by the eMail field
        students = await Student.prisma().find_many(
            take=5,
            order={
                'eMail': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.StudentWhereInput] = None,
        cursor: Optional[types.StudentWhereUniqueInput] = None,
        include: Optional[types.StudentInclude] = None,
        order: Optional[Union[types.StudentOrderByInput, List[types.StudentOrderByInput]]] = None,
        distinct: Optional[List[types.StudentScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Student record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Student filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Student model
        order
            Order the returned Student records by any field
        distinct
            Filter Student records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Student
            The first Student record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Student record ordered by the Mobile field
        student = await Student.prisma().find_first(
            skip=1,
            order={
                'Mobile': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.StudentWhereInput] = None,
        cursor: Optional[types.StudentWhereUniqueInput] = None,
        include: Optional[types.StudentInclude] = None,
        order: Optional[Union[types.StudentOrderByInput, List[types.StudentOrderByInput]]] = None,
        distinct: Optional[List[types.StudentScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Student record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Student filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Student model
        order
            Order the returned Student records by any field
        distinct
            Filter Student records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Student
            The first Student record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Student record ordered by the College field
        student = await Student.prisma().find_first_or_raise(
            skip=1,
            order={
                'College': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.StudentUpdateInput,
        where: types.StudentWhereUniqueInput,
        include: Optional[types.StudentInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Student record.

        Parameters
        ----------
        data
            Student record data specifying what to update
        where
            Student filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Student model

        Returns
        -------
        prisma.models.Student
            The updated Student record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        student = await Student.prisma().update(
            where={
                'ID': 2000430152,
            },
            data={
                # data to update the Student record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.StudentWhereUniqueInput,
        data: types.StudentUpsertInput,
        include: Optional[types.StudentInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Student filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Student model

        Returns
        -------
        prisma.models.Student
            The created or updated Student record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        student = await Student.prisma().upsert(
            where={
                'ID': 1868141281,
            },
            data={
                'create': {
                    'ID': 1868141281,
                },
                'update': {
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.StudentUpdateManyMutationInput,
        where: types.StudentWhereInput,
    ) -> int:
        """Update multiple Student records

        Parameters
        ----------
        data
            Student data to update the selected Student records to
        where
            Filter to select the Student records to update

        Returns
        -------
        int
            The total number of Student records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Student records
        total = await Student.prisma().update_many(
            data={
                'Yr_Start': 1860847622
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StudentWhereInput] = None,
        cursor: Optional[types.StudentWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Student records present in the database

        Parameters
        ----------
        select
            Select the Student fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Student filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.StudentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Student.prisma().count()

        # results: prisma.types.StudentCountAggregateOutput
        results = await Student.prisma().count(
            select={
                '_all': True,
                'Yr_End': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.StudentCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StudentWhereInput] = None,
        cursor: Optional[types.StudentWhereUniqueInput] = None,
    ) -> types.StudentCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.StudentCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StudentWhereInput] = None,
        cursor: Optional[types.StudentWhereUniqueInput] = None,
    ) -> Union[int, types.StudentCountAggregateOutput]:
        """Count the number of Student records present in the database

        Parameters
        ----------
        select
            Select the Student fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Student filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.StudentCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Student.prisma().count()

        # results: prisma.types.StudentCountAggregateOutput
        results = await Student.prisma().count(
            select={
                '_all': True,
                'Degree': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.StudentCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.StudentWhereInput] = None
    ) -> int:
        """Delete multiple Student records.

        Parameters
        ----------
        where
            Optional Student filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Student records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Student records
        total = await Student.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.StudentScalarFieldKeys'],
        *,
        where: Optional['types.StudentWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.StudentAvgAggregateInput'] = None,
        sum: Optional['types.StudentSumAggregateInput'] = None,
        min: Optional['types.StudentMinAggregateInput'] = None,
        max: Optional['types.StudentMaxAggregateInput'] = None,
        having: Optional['types.StudentScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.StudentCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.StudentScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.StudentScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.StudentGroupByOutput']:
        """Group Student records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Student fields to group records by
        where
            Student filter to select records
        take
            Limit the maximum number of Student records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.StudentGroupByOutput]
            A list of dictionaries representing the Student record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Student records by Branch values
        # and count how many records are in each group
        results = await Student.prisma().group_by(
            ['Branch'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class ProjectActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.Project]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await Project.prisma().query_raw(
            'SELECT * FROM Project WHERE ProjectID = ?',
            1448521415,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.Project
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await Project.prisma().query_first(
            'SELECT * FROM Project WHERE Title = ?',
            'bgcigfahea',
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.ProjectCreateInput,
        include: Optional[types.ProjectInclude] = None
    ) -> _PrismaModelT:
        """Create a new Project record.

        Parameters
        ----------
        data
            Project record data
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The created Project record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a Project record from just the required fields
        project = await Project.prisma().create(
            data={
                # data to create a Project record
                'ProjectID': 1249606685,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.ProjectCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple Project records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of Project record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await Project.prisma().create_many(
            data=[
                {
                    # data to create a Project record
                    'ProjectID': 835903122,
                },
                {
                    # data to create a Project record
                    'ProjectID': 763719779,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single Project record.

        Parameters
        ----------
        where
            Project filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The deleted Project record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        project = await Project.prisma().delete(
            where={
                'ProjectID': 429995104,
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique Project record.

        Parameters
        ----------
        where
            Project filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The found Project record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        project = await Project.prisma().find_unique(
            where={
                'ProjectID': 1775811865,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> _PrismaModelT:
        """Find a unique Project record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            Project filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The found Project record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        project = await Project.prisma().find_unique_or_raise(
            where={
                'ProjectID': 893145566,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
        include: Optional[types.ProjectInclude] = None,
        order: Optional[Union[types.ProjectOrderByInput, List[types.ProjectOrderByInput]]] = None,
        distinct: Optional[List[types.ProjectScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple Project records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of Project records returned
        skip
            Ignore the first N results
        where
            Project filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Project model
        order
            Order the returned Project records by any field
        distinct
            Filter Project records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.Project]
            The list of all Project records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 Project records
        projects = await Project.prisma().find_many(take=10)

        # find the first 5 Project records ordered by the Description field
        projects = await Project.prisma().find_many(
            take=5,
            order={
                'Description': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
        include: Optional[types.ProjectInclude] = None,
        order: Optional[Union[types.ProjectOrderByInput, List[types.ProjectOrderByInput]]] = None,
        distinct: Optional[List[types.ProjectScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single Project record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Project filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Project model
        order
            Order the returned Project records by any field
        distinct
            Filter Project records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Project
            The first Project record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Project record ordered by the Approach field
        project = await Project.prisma().find_first(
            skip=1,
            order={
                'Approach': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
        include: Optional[types.ProjectInclude] = None,
        order: Optional[Union[types.ProjectOrderByInput, List[types.ProjectOrderByInput]]] = None,
        distinct: Optional[List[types.ProjectScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single Project record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            Project filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned Project model
        order
            Order the returned Project records by any field
        distinct
            Filter Project records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.Project
            The first Project record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second Project record ordered by the Skills field
        project = await Project.prisma().find_first_or_raise(
            skip=1,
            order={
                'Skills': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.ProjectUpdateInput,
        where: types.ProjectWhereUniqueInput,
        include: Optional[types.ProjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single Project record.

        Parameters
        ----------
        data
            Project record data specifying what to update
        where
            Project filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The updated Project record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        project = await Project.prisma().update(
            where={
                'ProjectID': 995405759,
            },
            data={
                # data to update the Project record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.ProjectWhereUniqueInput,
        data: types.ProjectUpsertInput,
        include: Optional[types.ProjectInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            Project filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned Project model

        Returns
        -------
        prisma.models.Project
            The created or updated Project record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        project = await Project.prisma().upsert(
            where={
                'ProjectID': 2102736524,
            },
            data={
                'create': {
                    'ProjectID': 2102736524,
                },
                'update': {
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.ProjectUpdateManyMutationInput,
        where: types.ProjectWhereInput,
    ) -> int:
        """Update multiple Project records

        Parameters
        ----------
        data
            Project data to update the selected Project records to
        where
            Filter to select the Project records to update

        Returns
        -------
        int
            The total number of Project records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all Project records
        total = await Project.prisma().update_many(
            data={
                'HW_Needed': 'chbfcacbd'
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
    ) -> int:
        """Count the number of Project records present in the database

        Parameters
        ----------
        select
            Select the Project fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Project filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProjectCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Project.prisma().count()

        # results: prisma.types.ProjectCountAggregateOutput
        results = await Project.prisma().count(
            select={
                '_all': True,
                'Milestones': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.ProjectCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
    ) -> types.ProjectCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.ProjectCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.ProjectWhereInput] = None,
        cursor: Optional[types.ProjectWhereUniqueInput] = None,
    ) -> Union[int, types.ProjectCountAggregateOutput]:
        """Count the number of Project records present in the database

        Parameters
        ----------
        select
            Select the Project fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            Project filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.ProjectCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await Project.prisma().count()

        # results: prisma.types.ProjectCountAggregateOutput
        results = await Project.prisma().count(
            select={
                '_all': True,
                'ProjectID': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.ProjectCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.ProjectWhereInput] = None
    ) -> int:
        """Delete multiple Project records.

        Parameters
        ----------
        where
            Optional Project filter to find the records to be deleted

        Returns
        -------
        int
            The total number of Project records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all Project records
        total = await Project.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.ProjectScalarFieldKeys'],
        *,
        where: Optional['types.ProjectWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.ProjectAvgAggregateInput'] = None,
        sum: Optional['types.ProjectSumAggregateInput'] = None,
        min: Optional['types.ProjectMinAggregateInput'] = None,
        max: Optional['types.ProjectMaxAggregateInput'] = None,
        having: Optional['types.ProjectScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.ProjectCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.ProjectScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.ProjectScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.ProjectGroupByOutput']:
        """Group Project records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar Project fields to group records by
        where
            Project filter to select records
        take
            Limit the maximum number of Project records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.ProjectGroupByOutput]
            A list of dictionaries representing the Project record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group Project records by Title values
        # and count how many records are in each group
        results = await Project.prisma().group_by(
            ['Title'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]


class StudentProjectActions(Generic[_PrismaModelT]):
    __slots__ = (
        '_client',
        '_model',
    )

    def __init__(self, client: Prisma, model: Type[_PrismaModelT]) -> None:
        self._client = client
        self._model = model

    async def query_raw(
        self,
        query: LiteralString,
        *args: Any,
    ) -> List[_PrismaModelT]:
        """Execute a raw SQL query

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        List[prisma.models.StudentProject]
            The records returned by the SQL query

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        users = await StudentProject.prisma().query_raw(
            'SELECT * FROM StudentProject WHERE StudentID = ?',
            456633834,
        )
        ```
        """
        return await self._client.query_raw(query, *args, model=self._model)

    async def query_first(
        self,
        query: LiteralString,
        *args: Any,
    ) -> Optional[_PrismaModelT]:
        """Execute a raw SQL query, returning the first result

        Parameters
        ----------
        query
            The raw SQL query string to be executed
        *args
            Parameters to be passed to the SQL query, these MUST be used over
            string formatting to avoid an SQL injection vulnerability

        Returns
        -------
        prisma.models.StudentProject
            The first record returned by the SQL query
        None
            The raw SQL query did not return any records

        Raises
        ------
        prisma_errors.RawQueryError
            This could be due to invalid syntax, mismatched number of parameters or any other error
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        user = await StudentProject.prisma().query_first(
            'SELECT * FROM StudentProject WHERE ProjectID = ?',
            2058258651,
        )
        ```
        """
        return await self._client.query_first(query, *args, model=self._model)

    async def create(
        self,
        data: types.StudentProjectCreateInput,
        include: Optional[types.StudentProjectInclude] = None
    ) -> _PrismaModelT:
        """Create a new StudentProject record.

        Parameters
        ----------
        data
            StudentProject record data
        include
            Specifies which relations should be loaded on the returned StudentProject model

        Returns
        -------
        prisma.models.StudentProject
            The created StudentProject record

        Raises
        ------
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # create a StudentProject record from just the required fields
        studentproject = await StudentProject.prisma().create(
            data={
                # data to create a StudentProject record
                'StudentID': 1583689592,
                'ProjectID': 878442065,
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='create',
            model=self._model,
            arguments={
                'data': data,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def create_many(
        self,
        data: List[types.StudentProjectCreateWithoutRelationsInput],
        *,
        skip_duplicates: Optional[bool] = None,
    ) -> int:
        """Create multiple StudentProject records at once.

        This function is *not* available when using SQLite.

        Parameters
        ----------
        data
            List of StudentProject record data
        skip_duplicates
            Boolean flag for ignoring unique constraint errors

        Returns
        -------
        int
            The total number of records created

        Raises
        ------
        prisma.errors.UnsupportedDatabaseError
            Attempting to query when using SQLite
        prisma.errors.UniqueViolationError
            A unique constraint check has failed, these can be ignored with the `skip_duplicates` argument
        prisma.errors.MissingRequiredValueError
            Value is required but was not found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        total = await StudentProject.prisma().create_many(
            data=[
                {
                    # data to create a StudentProject record
                    'StudentID': 1675280054,
                    'ProjectID': 1627576247,
                },
                {
                    # data to create a StudentProject record
                    'StudentID': 2054802212,
                    'ProjectID': 60335757,
                },
            ],
            skip_duplicates=True,
        )
        ```
        """
        if self._client._active_provider == 'sqlite':
            raise errors.UnsupportedDatabaseError('sqlite', 'create_many()')

        resp = await self._client._execute(
            method='create_many',
            model=self._model,
            arguments={
                'data': data,
                'skipDuplicates': skip_duplicates,
            },
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    async def delete(
        self,
        where: types.StudentProjectWhereUniqueInput,
        include: Optional[types.StudentProjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Delete a single StudentProject record.

        Parameters
        ----------
        where
            StudentProject filter to select the record to be deleted, must be unique
        include
            Specifies which relations should be loaded on the returned StudentProject model

        Returns
        -------
        prisma.models.StudentProject
            The deleted StudentProject record
        None
            Could not find a record to delete

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        studentproject = await StudentProject.prisma().delete(
            where={
                # StudentProject where unique filter

            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='delete',
                model=self._model,
                arguments={
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def find_unique(
        self,
        where: types.StudentProjectWhereUniqueInput,
        include: Optional[types.StudentProjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Find a unique StudentProject record.

        Parameters
        ----------
        where
            StudentProject filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned StudentProject model

        Returns
        -------
        prisma.models.StudentProject
            The found StudentProject record
        None
            No record matching the given input could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        studentproject = await StudentProject.prisma().find_unique(
            where={
                # StudentProject where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None
        return model_parse(self._model, result)

    async def find_unique_or_raise(
        self,
        where: types.StudentProjectWhereUniqueInput,
        include: Optional[types.StudentProjectInclude] = None
    ) -> _PrismaModelT:
        """Find a unique StudentProject record. Raises `RecordNotFoundError` if no record is found.

        Parameters
        ----------
        where
            StudentProject filter to find the record, must be unique
        include
            Specifies which relations should be loaded on the returned StudentProject model

        Returns
        -------
        prisma.models.StudentProject
            The found StudentProject record

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        studentproject = await StudentProject.prisma().find_unique_or_raise(
            where={
                # StudentProject where unique filter

            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_unique_or_raise',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def find_many(
        self,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StudentProjectWhereInput] = None,
        cursor: Optional[types.StudentProjectWhereUniqueInput] = None,
        include: Optional[types.StudentProjectInclude] = None,
        order: Optional[Union[types.StudentProjectOrderByInput, List[types.StudentProjectOrderByInput]]] = None,
        distinct: Optional[List[types.StudentProjectScalarFieldKeys]] = None,
    ) -> List[_PrismaModelT]:
        """Find multiple StudentProject records.

        An empty list is returned if no records could be found.

        Parameters
        ----------
        take
            Limit the maximum number of StudentProject records returned
        skip
            Ignore the first N results
        where
            StudentProject filter to select records
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned StudentProject model
        order
            Order the returned StudentProject records by any field
        distinct
            Filter StudentProject records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        List[prisma.models.StudentProject]
            The list of all StudentProject records that could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the first 10 StudentProject records
        studentprojects = await StudentProject.prisma().find_many(take=10)

        # find the first 5 StudentProject records ordered by the StudentID field
        studentprojects = await StudentProject.prisma().find_many(
            take=5,
            order={
                'StudentID': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_many',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return [model_parse(self._model, r) for r in resp['data']['result']]

    async def find_first(
        self,
        skip: Optional[int] = None,
        where: Optional[types.StudentProjectWhereInput] = None,
        cursor: Optional[types.StudentProjectWhereUniqueInput] = None,
        include: Optional[types.StudentProjectInclude] = None,
        order: Optional[Union[types.StudentProjectOrderByInput, List[types.StudentProjectOrderByInput]]] = None,
        distinct: Optional[List[types.StudentProjectScalarFieldKeys]] = None,
    ) -> Optional[_PrismaModelT]:
        """Find a single StudentProject record.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            StudentProject filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned StudentProject model
        order
            Order the returned StudentProject records by any field
        distinct
            Filter StudentProject records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.StudentProject
            The first StudentProject record found, matching the given arguments
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second StudentProject record ordered by the ProjectID field
        studentproject = await StudentProject.prisma().find_first(
            skip=1,
            order={
                'ProjectID': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        result = resp['data']['result']
        if result is None:
            return None

        return model_parse(self._model, result)

    async def find_first_or_raise(
        self,
        skip: Optional[int] = None,
        where: Optional[types.StudentProjectWhereInput] = None,
        cursor: Optional[types.StudentProjectWhereUniqueInput] = None,
        include: Optional[types.StudentProjectInclude] = None,
        order: Optional[Union[types.StudentProjectOrderByInput, List[types.StudentProjectOrderByInput]]] = None,
        distinct: Optional[List[types.StudentProjectScalarFieldKeys]] = None,
    ) -> _PrismaModelT:
        """Find a single StudentProject record. Raises `RecordNotFoundError` if no record was found.

        Parameters
        ----------
        skip
            Ignore the first N records
        where
            StudentProject filter to select the record
        cursor
            Specifies the position in the list to start returning results from, (typically an ID field)
        include
            Specifies which relations should be loaded on the returned StudentProject model
        order
            Order the returned StudentProject records by any field
        distinct
            Filter StudentProject records by either a single distinct field or distinct combinations of fields

        Returns
        -------
        prisma.models.StudentProject
            The first StudentProject record found, matching the given arguments

        Raises
        ------
        prisma.errors.RecordNotFoundError
            No record was found
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # find the second StudentProject record ordered by the StudentID field
        studentproject = await StudentProject.prisma().find_first_or_raise(
            skip=1,
            order={
                'StudentID': 'desc',
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='find_first_or_raise',
            model=self._model,
            arguments={
                'skip': skip,
                'where': where,
                'order_by': order,
                'cursor': cursor,
                'include': include,
                'distinct': distinct,
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update(
        self,
        data: types.StudentProjectUpdateInput,
        where: types.StudentProjectWhereUniqueInput,
        include: Optional[types.StudentProjectInclude] = None
    ) -> Optional[_PrismaModelT]:
        """Update a single StudentProject record.

        Parameters
        ----------
        data
            StudentProject record data specifying what to update
        where
            StudentProject filter to select the unique record to create / update
        include
            Specifies which relations should be loaded on the returned StudentProject model

        Returns
        -------
        prisma.models.StudentProject
            The updated StudentProject record
        None
            No record could be found

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        studentproject = await StudentProject.prisma().update(
            where={
                # StudentProject where unique filter

            },
            data={
                # data to update the StudentProject record to
            },
        )
        ```
        """
        try:
            resp = await self._client._execute(
                method='update',
                model=self._model,
                arguments={
                    'data': data,
                    'where': where,
                    'include': include,
                },
            )
        except errors.RecordNotFoundError:
            return None

        return model_parse(self._model, resp['data']['result'])

    async def upsert(
        self,
        where: types.StudentProjectWhereUniqueInput,
        data: types.StudentProjectUpsertInput,
        include: Optional[types.StudentProjectInclude] = None,
    ) -> _PrismaModelT:
        """Updates an existing record or create a new one

        Parameters
        ----------
        where
            StudentProject filter to select the unique record to create / update
        data
            Data specifying what fields to set on create and update
        include
            Specifies which relations should be loaded on the returned StudentProject model

        Returns
        -------
        prisma.models.StudentProject
            The created or updated StudentProject record

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python
        prisma.errors.MissingRequiredValueError
            Value is required but was not found

        Example
        -------
        ```py
        studentproject = await StudentProject.prisma().upsert(
            where={
                # StudentProject where unique filter
            },
            data={
                'create': {
                    # StudentProject data to be set if the record does not exist
                },
                'update': {
                    # StudentProject data to be set if the record does exist
                },
            },
        )
        ```
        """
        resp = await self._client._execute(
            method='upsert',
            model=self._model,
            arguments={
                'where': where,
                'include': include,
                'create': data.get('create'),
                'update': data.get('update'),
            },
        )
        return model_parse(self._model, resp['data']['result'])

    async def update_many(
        self,
        data: types.StudentProjectUpdateManyMutationInput,
        where: types.StudentProjectWhereInput,
    ) -> int:
        """Update multiple StudentProject records

        Parameters
        ----------
        data
            StudentProject data to update the selected StudentProject records to
        where
            Filter to select the StudentProject records to update

        Returns
        -------
        int
            The total number of StudentProject records that were updated

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # update all StudentProject records
        total = await StudentProject.prisma().update_many(
            data={
                'ProjectID': 684462146
            },
            where={}
        )
        ```
        """
        resp = await self._client._execute(
            method='update_many',
            model=self._model,
            arguments={'data': data, 'where': where,},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    @overload
    async def count(
        self,
        select: None = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StudentProjectWhereInput] = None,
        cursor: Optional[types.StudentProjectWhereUniqueInput] = None,
    ) -> int:
        """Count the number of StudentProject records present in the database

        Parameters
        ----------
        select
            Select the StudentProject fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            StudentProject filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.StudentProjectCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await StudentProject.prisma().count()

        # results: prisma.types.StudentProjectCountAggregateOutput
        results = await StudentProject.prisma().count(
            select={
                '_all': True,
                'StudentID': True,
            },
        )
        ```
        """


    @overload
    async def count(
        self,
        select: types.StudentProjectCountAggregateInput,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StudentProjectWhereInput] = None,
        cursor: Optional[types.StudentProjectWhereUniqueInput] = None,
    ) -> types.StudentProjectCountAggregateOutput:
        ...

    async def count(
        self,
        select: Optional[types.StudentProjectCountAggregateInput] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        where: Optional[types.StudentProjectWhereInput] = None,
        cursor: Optional[types.StudentProjectWhereUniqueInput] = None,
    ) -> Union[int, types.StudentProjectCountAggregateOutput]:
        """Count the number of StudentProject records present in the database

        Parameters
        ----------
        select
            Select the StudentProject fields to be counted
        take
            Limit the maximum result
        skip
            Ignore the first N records
        where
            StudentProject filter to find records
        cursor
            Specifies the position in the list to start counting results from, (typically an ID field)
        order
            This parameter is deprecated and will be removed in a future release

        Returns
        -------
        int
            The total number of records found, returned if `select` is not given

        prisma.types.StudentProjectCountAggregateOutput
            Data returned when `select` is used, the fields present in this dictionary will
            match the fields passed in the `select` argument

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # total: int
        total = await StudentProject.prisma().count()

        # results: prisma.types.StudentProjectCountAggregateOutput
        results = await StudentProject.prisma().count(
            select={
                '_all': True,
                'ProjectID': True,
            },
        )
        ```
        """

        # TODO: this selection building should be moved to the QueryBuilder
        #
        # note the distinction between checking for `not select` here and `select is None`
        # later is to handle the case that the given select dictionary is empty, this
        # is a limitation of our types.
        if not select:
            root_selection = ['_count { _all }']
        else:

            root_selection = [
                '_count {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))
            ]

        resp = await self._client._execute(
            method='count',
            model=self._model,
            arguments={
                'take': take,
                'skip': skip,
                'where': where,
                'cursor': cursor,
            },
            root_selection=root_selection,
        )

        if select is None:
            return cast(int, resp['data']['result']['_count']['_all'])
        else:
            return cast(types.StudentProjectCountAggregateOutput, resp['data']['result']['_count'])

    async def delete_many(
        self,
        where: Optional[types.StudentProjectWhereInput] = None
    ) -> int:
        """Delete multiple StudentProject records.

        Parameters
        ----------
        where
            Optional StudentProject filter to find the records to be deleted

        Returns
        -------
        int
            The total number of StudentProject records that were deleted

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # delete all StudentProject records
        total = await StudentProject.prisma().delete_many()
        ```
        """
        resp = await self._client._execute(
            method='delete_many',
            model=self._model,
            arguments={'where': where},
            root_selection=['count'],
        )
        return int(resp['data']['result']['count'])

    # TODO: make this easier to work with safely, currently output fields are typed as
    #       not required, we should refactor the return type
    # TODO: consider returning a Dict where the keys are a Tuple of the `by` selection
    # TODO: statically type that the order argument is required when take or skip are present
    async def group_by(
        self,
        by: List['types.StudentProjectScalarFieldKeys'],
        *,
        where: Optional['types.StudentProjectWhereInput'] = None,
        take: Optional[int] = None,
        skip: Optional[int] = None,
        avg: Optional['types.StudentProjectAvgAggregateInput'] = None,
        sum: Optional['types.StudentProjectSumAggregateInput'] = None,
        min: Optional['types.StudentProjectMinAggregateInput'] = None,
        max: Optional['types.StudentProjectMaxAggregateInput'] = None,
        having: Optional['types.StudentProjectScalarWhereWithAggregatesInput'] = None,
        count: Optional[Union[bool, 'types.StudentProjectCountAggregateInput']] = None,
        order: Optional[Union[Mapping['types.StudentProjectScalarFieldKeys', 'types.SortOrder'], List[Mapping['types.StudentProjectScalarFieldKeys', 'types.SortOrder']]]] = None,
    ) -> List['types.StudentProjectGroupByOutput']:
        """Group StudentProject records by one or more field values and perform aggregations
        each group such as finding the average.

        Parameters
        ----------
        by
            List of scalar StudentProject fields to group records by
        where
            StudentProject filter to select records
        take
            Limit the maximum number of StudentProject records returned
        skip
            Ignore the first N records
        avg
            Adds the average of all values of the specified fields to the `_avg` field
            in the returned data.
        sum
            Adds the sum of all values of the specified fields to the `_sum` field
            in the returned data.
        min
            Adds the smallest available value for the specified fields to the `_min` field
            in the returned data.
        max
            Adds the largest available value for the specified fields to the `_max` field
            in the returned data.
        count
            Adds a count of non-fields to the `_count` field in the returned data.
        having
            Allows you to filter groups by an aggregate value - for example only return
            groups having an average age less than 50.
        order
            Lets you order the returned list by any property that is also present in `by`.
            Only **one** field is allowed at a time.

        Returns
        -------
        List[prisma.types.StudentProjectGroupByOutput]
            A list of dictionaries representing the StudentProject record,
            this will also have additional fields present if aggregation arguments
            are used (see the above parameters)

        Raises
        ------
        prisma.errors.PrismaError
            Catch all for every exception raised by Prisma Client Python

        Example
        -------
        ```py
        # group StudentProject records by StudentID values
        # and count how many records are in each group
        results = await StudentProject.prisma().group_by(
            ['StudentID'],
            count=True,
        )
        ```
        """
        if order is None:
            if take is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'take\' is present')

            if skip is not None:
                raise TypeError('Missing argument: \'order\' which is required when \'skip\' is present')

        root_selection: List[str] = [*by]
        if avg is not None:
            root_selection.append(_select_fields('_avg', avg))

        if min is not None:
            root_selection.append(_select_fields('_min', min))

        if sum is not None:
            root_selection.append(_select_fields('_sum', sum))

        if max is not None:
            root_selection.append(_select_fields('_max', max))

        if count is not None:
            if count is True:
                root_selection.append('_count { _all }')
            elif isinstance(count, dict):
                root_selection.append(_select_fields('_count', count))

        resp = await self._client._execute(
            method='group_by',
            model=self._model,
            arguments={
                'by': by,
                'take': take,
                'skip': skip,
                'where': where,
                'having': having,
                'orderBy': order,
            },
            root_selection=root_selection,
        )
        return resp['data']['result']  # type: ignore[no-any-return]



def _select_fields(root: str, select: Mapping[str, Any]) -> str:
    """Helper to build a GraphQL selection string

    This is a work around until field selection is added to the query builder.
    """

    return root + ' {{ {0} }}'.format(' '.join(k for k, v in select.items() if v is True))


from . import models